"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TimeBasedRateLimiter = void 0;
const logger_1 = require("@d-fischer/logger");
const RateLimitReachedError_1 = require("../errors/RateLimitReachedError");
class TimeBasedRateLimiter {
    constructor({ logger, bucketSize, timeFrame, doRequest }) {
        this._queue = [];
        this._usedFromBucket = 0;
        this._paused = false;
        this._logger = (0, logger_1.createLogger)({ name: 'rate-limiter', emoji: true, ...logger });
        this._bucketSize = bucketSize;
        this._timeFrame = timeFrame;
        this._callback = doRequest;
    }
    async request(req, options) {
        return await new Promise((resolve, reject) => {
            var _a;
            const reqSpec = {
                req,
                resolve,
                reject,
                limitReachedBehavior: (_a = options === null || options === void 0 ? void 0 : options.limitReachedBehavior) !== null && _a !== void 0 ? _a : 'enqueue'
            };
            if (this._usedFromBucket >= this._bucketSize || this._paused) {
                switch (reqSpec.limitReachedBehavior) {
                    case 'enqueue': {
                        this._queue.push(reqSpec);
                        if (this._usedFromBucket + this._queue.length >= this._bucketSize) {
                            this._logger.warn(`Rate limit of ${this._bucketSize} was reached, waiting for ${this._paused ? 'the limiter to be unpaused' : 'a free bucket entry'}; queue size is ${this._queue.length}`);
                        }
                        else {
                            this._logger.info(`Enqueueing request because the rate limiter is paused; queue size is ${this._queue.length}`);
                        }
                        break;
                    }
                    case 'null': {
                        reqSpec.resolve(null);
                        this._logger.warn(`Rate limit of ${this._bucketSize} was reached, dropping request and returning null`);
                        if (this._paused) {
                            this._logger.info('Returning null for request because the rate limiter is paused');
                        }
                        else {
                            this._logger.warn(`Rate limit of ${this._bucketSize} was reached, dropping request and returning null`);
                        }
                        break;
                    }
                    case 'throw': {
                        reqSpec.reject(new RateLimitReachedError_1.RateLimitReachedError(`Request dropped because ${this._paused ? 'the rate limiter is paused' : 'the rate limit was reached'}`));
                        break;
                    }
                    default: {
                        throw new Error('this should never happen');
                    }
                }
            }
            else {
                void this._runRequest(reqSpec);
            }
        });
    }
    clear() {
        this._queue = [];
    }
    pause() {
        this._paused = true;
    }
    resume() {
        this._paused = false;
        this._runNextRequest();
    }
    async _runRequest(reqSpec) {
        this._logger.debug(`doing a request, new queue length is ${this._queue.length}`);
        this._usedFromBucket += 1;
        const { req, resolve, reject } = reqSpec;
        try {
            resolve(await this._callback(req));
        }
        catch (e) {
            reject(e);
        }
        finally {
            setTimeout(() => {
                this._usedFromBucket -= 1;
                if (this._queue.length && this._usedFromBucket < this._bucketSize) {
                    this._runNextRequest();
                }
            }, this._timeFrame);
        }
    }
    _runNextRequest() {
        if (this._paused) {
            return;
        }
        const reqSpec = this._queue.shift();
        if (reqSpec) {
            void this._runRequest(reqSpec);
        }
    }
}
exports.TimeBasedRateLimiter = TimeBasedRateLimiter;
